{"version":3,"sources":["SortingAlgos/sortingAlgos.js","SortingViz/SortingViz.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSort","array","animations","length","aux","slice","sort","start","end","mid","Math","floor","k","i","j","push","merge","quickAnimations","quickSort","left","right","index","pivot","swap","partition","idxBigger","idxSmaller","tmp","SortingViz","props","state","width","window","innerWidth","height","innerHeight","updateWindowDimensions","bind","this","generateArray","removeEventListener","setState","min","max","arr","random","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","barOneHeight","barTwoHeight","len","animation","selectionSort","animationLength","minIdx","compIdx","barMinStyle","barCompStyle","swapIdx","minHeight","swapHeight","barSwapStyle","val","insertionSort","bubbleSort","counter","idxOne","idxTwo","idxHigher","idxLower","heightHigher","heightLower","barHigherStyle","barLowerStyle","Navbar","bg","variant","class","Button","onClick","className","map","value","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55eca58b.chunk.js","sourcesContent":["// mergesort\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) {return array;}\r\n    const aux = array.slice();\r\n    sort(array, aux, 0, array.length-1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction sort(array, aux, start, end, animations) {\r\n    if (end <= start) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    sort(aux, array, start, mid, animations);\r\n    sort(aux, array, mid + 1, end, animations);\r\n    merge(array, aux, start, mid, end, animations);\r\n}\r\n\r\nfunction merge(array, aux, start, mid, end, animations) {\r\n    let k = start;\r\n    let i = start;\r\n    let j = mid + 1;\r\n    while (i <= mid && j <= end) {\r\n        // 1st push to chagne color, second push to revert color\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (aux[i] <= aux[j]) {\r\n            animations.push([k, aux[i]]);\r\n            array[k++] = aux[i++];\r\n        } else {\r\n            animations.push([k, aux[j]]);\r\n            array[k++] = aux[j++];\r\n        }\r\n    }\r\n    while (i <= mid) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, aux[i]]);\r\n        array[k++] = aux[i++];\r\n    }\r\n    while (j <= end) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, aux[j]]);\r\n        array[k++] = aux[j++];\r\n    }\r\n}\r\n\r\n// quicksort\r\nconst quickAnimations = [];\r\nexport function quickSort(array, left, right) {\r\n    var index;\r\n    if (array.length > 1) {\r\n        var animation = [];\r\n        index = partition(array, left, right);\r\n        if (left < index - 1) {\r\n            quickSort(array, left, index - 1);\r\n        }\r\n        if (index < right) {\r\n            quickSort(array, index, right);\r\n        }\r\n    }\r\n    return quickAnimations;\r\n}\r\n\r\nfunction partition(array, left, right) {\r\n    const mid = Math.floor((right + left) / 2)\r\n    const pivot = array[mid];\r\n    while (left <= right) {\r\n        while (array[left] < pivot) {\r\n            left++;\r\n        }\r\n        while (array[right] > pivot) {\r\n            right--;\r\n        }\r\n        if (left <= right) {\r\n            quickAnimations.push([left, right]);\r\n            quickAnimations.push([left, right]);\r\n            quickAnimations.push([left, right, array[left], array[right]]);\r\n            swap(array, left, right);\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    return left; // left = right at this step\r\n}\r\n// Selection Sort\r\nexport function selectionSort(array) {\r\n    let len = array.length;\r\n    // main animations array that keeps subarray of each swap (each outer loop)\r\n    const animations = [];\r\n    for (let i = 0; i < len; i++) {\r\n        let min = i;\r\n        var animation = [];\r\n        for (let j = i + 1; j < len; j++) {\r\n            animation.push([min, j]);\r\n            animation.push([min, j]);\r\n            if (array[min] > array[j]) min = j;\r\n        }\r\n        animation.push([min, i, array[min], array[i]]);\r\n        if (min !== i) {\r\n            let tmp = array[i];\r\n            array[i] = array[min];\r\n            array[min] = tmp;\r\n        }\r\n        animations.push(animation);\r\n    }\r\n    return animations;\r\n}\r\n\r\n// Insertion Sort\r\nexport function insertionSort(array) {\r\n    let len = array.length;\r\n    const animations = [];\r\n    for (let i = 1; i < len; i++) {\r\n        var animation = [];\r\n        let val = array[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && array[j] > val) {\r\n            animation.push([i, j]);\r\n            animation.push([i, j]);\r\n            animation.push([j + 1, j, array[j + 1], array[j]]);\r\n            array[j + 1] = array[j--];\r\n        }\r\n        animation.push([j + 1, i, array[j + 1], val]);\r\n        array[j + 1] = val;\r\n        animations.push(animation);\r\n    }\r\n    return animations;\r\n}\r\n\r\n// Bubble Sort\r\nexport function bubbleSort(array) {\r\n    let len = array.length;\r\n    const animations = [];\r\n    for (let i = 0; i < len; i++) {\r\n        var animation = [];\r\n        // -1 to prevent animations out of bounds error error :/\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            animation.push([j, j + 1]);\r\n            animation.push([j, j + 1]);\r\n            if (array[j] > array[j + 1]) {\r\n                animation.push([j, j + 1, array[j], array[j + 1]]);\r\n                swap(array, j, j + 1);\r\n            }\r\n        }\r\n        animations.push(animation);\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction swap(array, idxBigger, idxSmaller) {\r\n    let tmp = array[idxBigger];\r\n    array[idxBigger] = array[idxSmaller];\r\n    array[idxSmaller] = tmp;\r\n}","import React from 'react';\r\nimport {Navbar, Button} from 'react-bootstrap';\r\nimport './SortingViz.css';\r\nimport {mergeSort, quickSort, selectionSort, bubbleSort, insertionSort} from '../SortingAlgos/sortingAlgos.js'\r\n\r\nexport default class SortingViz extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    // runs when all page components are rendered\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        this.generateArray();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({width: window.innerWidth, height: window.innerHeight});\r\n    }\r\n \r\n    generateArray() {\r\n        const arr = [];\r\n        for (let i = 0; i < this.state.width/4.05; i++) {\r\n            arr.push(randomIntFromInterval(10, this.state.height/1.15));\r\n        }\r\n        this.setState({\r\n            array: arr\r\n        });\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = mergeSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'blue' : 'peru';\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * 5);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = quickSort(this.state.array, 0, this.state.array.length - 1);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'blue' : 'peru';\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * 5);\r\n            } else {\r\n                const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                barOneStyle.height = `${barTwoHeight}px`;\r\n                barTwoStyle.height = `${barOneHeight}px`;\r\n                }, i * 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = selectionSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const animation = animations[i];\r\n            const animationLength = animation.length;\r\n            for (let j = 0; j < animationLength; j++) {\r\n                // if not last element, only change color\r\n                const color = j % 2 === 0 ? 'blue' : 'peru';\r\n                if (j + 1 !== animationLength) {\r\n                    const [minIdx, compIdx] = animation[j];\r\n                    const barMinStyle = arrayBars[minIdx].style;\r\n                    const barCompStyle = arrayBars[compIdx].style;\r\n                    setTimeout(() => {\r\n                        barMinStyle.backgroundColor = color;\r\n                        barCompStyle.backgroundColor = color;\r\n                        }, i * 50);\r\n                    \r\n                } else {\r\n                    const [minIdx, swapIdx, minHeight, swapHeight] = animation[j];\r\n                    const barSwapStyle = arrayBars[swapIdx].style;\r\n                    const barMinStyle = arrayBars[minIdx].style;\r\n                    setTimeout(() => {\r\n                        barSwapStyle.height = `${minHeight}px`;\r\n                        barMinStyle.height = `${swapHeight}px`;\r\n                    }, i * 50);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = insertionSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const animation = animations[i];\r\n            const animationLength = animation.length;\r\n            for (let j = 0; j < animationLength; j++) {\r\n                if (j !== animationLength - 1) {\r\n                    const isColorChange = j % 3 !== 2;\r\n                    if (isColorChange) {\r\n                        const color = j % 3 === 0 ? 'blue' : 'peru';\r\n                        const [barOneIdx, barTwoIdx] = animation[j];\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        setTimeout(() => {\r\n                            barOneStyle.backgroundColor = color;\r\n                            barTwoStyle.backgroundColor = color;\r\n                        }, i * 50);\r\n                    } else {\r\n                        const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight] = animation[j];\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        setTimeout(() => {\r\n                            barOneStyle.height = `${barTwoHeight}px`;\r\n                            barTwoStyle.height = `${barOneHeight}px`;\r\n                        }, i * 50);\r\n                    }\r\n                } else {\r\n                    // there's better way to do this but this is quick and dirty \r\n                    const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight] = animation[j];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.height = `${barTwoHeight}px`;\r\n                        barTwoStyle.height = `${barOneHeight}px`;\r\n                    }, i * 50);;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = bubbleSort(this.state.array);\r\n        var counter = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const animation = animations[i];\r\n            const animationLength = animation.length;\r\n            for (let j = 0; j < animationLength; j++) {\r\n                if (animation[j].length === 2) {\r\n                    const color = counter % 2 === 0 ? 'blue' : 'peru';\r\n                    counter += 1;\r\n                    const [idxOne, idxTwo] = animation[j];\r\n                    const barOneStyle = arrayBars[idxOne].style;\r\n                    const barTwoStyle = arrayBars[idxTwo].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    }, i * 50);\r\n                } else {\r\n                    counter = 0;\r\n                    const [idxHigher, idxLower, heightHigher, heightLower] = animation[j];\r\n                    const barHigherStyle = arrayBars[idxHigher].style;\r\n                    const barLowerStyle = arrayBars[idxLower].style;\r\n                    setTimeout(() => {\r\n                        barHigherStyle.height = `${heightLower}px`;\r\n                        barLowerStyle.height = `${heightHigher}px`;\r\n                    }, i * 50);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // mandatory interface\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <>\r\n            <Navbar bg=\"light\" variant=\"light\">\r\n                <div class=\"btn-toolbar\">\r\n                    <Button variant=\"outline-primary\" onClick={() => this.generateArray()}>Generate New Array</Button>&nbsp;\r\n                    <Button variant=\"outline-secondary\" onClick={() => this.selectionSort()}>Selection Sort</Button>&nbsp;\r\n                    <Button variant=\"outline-secondary\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>&nbsp;\r\n                    <Button variant=\"outline-secondary\" onClick={() => this.insertionSort()}>Insertion Sort</Button>&nbsp;\r\n                    <Button variant=\"outline-secondary\" onClick={() => this.mergeSort()}>Merge Sort</Button>&nbsp;\r\n                    <Button variant=\"outline-secondary\" onClick={() => this.quickSort()}>Quick Sort</Button>&nbsp;\r\n                </div>\r\n            </Navbar>\r\n\r\n            <div className=\"array-container\">\r\n                {array.map((value, index) => (\r\n                    // defining html bar for each array element\r\n                    <div \r\n                    className=\"array-bar\" \r\n                    key={index} \r\n                    style={{height: `${value}px`}}>\r\n                    </div>\r\n                ) // end of map\r\n                )}\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a random number between min (inclusive) and max (exclusive)\r\n * From: https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\n */\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n","import React from 'react';\nimport SortingViz from './SortingViz/SortingViz';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <SortingViz></SortingViz>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}